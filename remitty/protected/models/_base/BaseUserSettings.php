<?php

/**
 * Company: Yee Technologies Pvt. Ltd. < www.yeetechnologies.com >
 * Author : Praveen Shivhare < praveen.tuffgeekers@gmail.com >
 */
 
/**
 * This is the model base class for the table "{{user_settings}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UserSettings".
 *
 * Columns in table "{{user_settings}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $user_id
 * @property integer $email_transaction_approve
 * @property integer $email_transaction_cancel
 * @property integer $email_transaction_receive
 * @property integer $email_transaction_confirm
 * @property integer $email_transaction_withdraw
 * @property integer $notif_transaction_approve
 * @property integer $notif_transaction_cancel
 * @property integer $notif_transaction_receive
 * @property integer $notif_transaction_confirm
 * @property integer $notif_transaction_withdraw
 *
 */
abstract class BaseUserSettings extends GxActiveRecord {

	public function beforeValidate()
	{
		if($this->isNewRecord)
		{
			if ( !isset( $this->user_id )) $this->user_id = Yii::app()->user->id;			
	}else{
			}
		return parent::beforeValidate();
	}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{user_settings}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UserSettings|UserSettings', $n);
	}

	public static function representingColumn() {
		return 'user_id';
	}

	public function rules() {
		return array(
			array('user_id', 'required'),
			array('user_id, email_transaction_approve, email_transaction_cancel, email_transaction_receive, email_transaction_confirm, email_transaction_withdraw, notif_transaction_approve, notif_transaction_cancel, notif_transaction_receive, notif_transaction_confirm, notif_transaction_withdraw', 'numerical', 'integerOnly'=>true),
			array('email_transaction_approve, email_transaction_cancel, email_transaction_receive, email_transaction_confirm, email_transaction_withdraw, notif_transaction_approve, notif_transaction_cancel, notif_transaction_receive, notif_transaction_confirm, notif_transaction_withdraw', 'default', 'setOnEmpty' => true, 'value' => null),
			array('user_id, email_transaction_approve, email_transaction_cancel, email_transaction_receive, email_transaction_confirm, email_transaction_withdraw, notif_transaction_approve, notif_transaction_cancel, notif_transaction_receive, notif_transaction_confirm, notif_transaction_withdraw', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'user_id' => Yii::t('app', 'User'),
			'email_transaction_approve' => Yii::t('app', 'Email Transaction Approve'),
			'email_transaction_cancel' => Yii::t('app', 'Email Transaction Cancel'),
			'email_transaction_receive' => Yii::t('app', 'Email Transaction Receive'),
			'email_transaction_confirm' => Yii::t('app', 'Email Transaction Confirm'),
			'email_transaction_withdraw' => Yii::t('app', 'Email Transaction Withdraw'),
			'notif_transaction_approve' => Yii::t('app', 'Notif Transaction Approve'),
			'notif_transaction_cancel' => Yii::t('app', 'Notif Transaction Cancel'),
			'notif_transaction_receive' => Yii::t('app', 'Notif Transaction Receive'),
			'notif_transaction_confirm' => Yii::t('app', 'Notif Transaction Confirm'),
			'notif_transaction_withdraw' => Yii::t('app', 'Notif Transaction Withdraw'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('email_transaction_approve', $this->email_transaction_approve);
		$criteria->compare('email_transaction_cancel', $this->email_transaction_cancel);
		$criteria->compare('email_transaction_receive', $this->email_transaction_receive);
		$criteria->compare('email_transaction_confirm', $this->email_transaction_confirm);
		$criteria->compare('email_transaction_withdraw', $this->email_transaction_withdraw);
		$criteria->compare('notif_transaction_approve', $this->notif_transaction_approve);
		$criteria->compare('notif_transaction_cancel', $this->notif_transaction_cancel);
		$criteria->compare('notif_transaction_receive', $this->notif_transaction_receive);
		$criteria->compare('notif_transaction_confirm', $this->notif_transaction_confirm);
		$criteria->compare('notif_transaction_withdraw', $this->notif_transaction_withdraw);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}