<?php

/**
 * Company: Yee Technologies Pvt. Ltd. < www.yeetechnologies.com >
 * Author : Praveen Shivhare < praveen.tuffgeekers@gmail.com >
 */
 
/**
 * This is the model base class for the table "{{security_question}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SecurityQuestion".
 *
 * Columns in table "{{security_question}}" available as properties of the model,
 * followed by relations of table "{{security_question}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $user_id
 * @property string $question
 * @property string $answer
 *
 * @property User $user
 */
abstract class BaseSecurityQuestion extends GxActiveRecord {

	public function beforeValidate()
	{
		if($this->isNewRecord)
		{
			if ( !isset( $this->user_id )) $this->user_id = Yii::app()->user->id;			
	}else{
			}
		return parent::beforeValidate();
	}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{security_question}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'SecurityQuestion|SecurityQuestions', $n);
	}

	public static function representingColumn() {
		return 'question';
	}

	public function rules() {
		return array(
			array('user_id, question, answer', 'required'),
			array('user_id', 'numerical', 'integerOnly'=>true),
			array('question', 'length', 'max'=>100),
			array('answer', 'length', 'max'=>45),
			array('id, user_id, question, answer', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => null,
			'question' => Yii::t('app', 'Question'),
			'answer' => Yii::t('app', 'Answer'),
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('question', $this->question, true);
		$criteria->compare('answer', $this->answer, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}