<?php

/**
 * Company: Yee Technologies Pvt. Ltd. < www.yeetechnologies.com >
 * Author : Praveen Shivhare < praveen.tuffgeekers@gmail.com >
 */
 
/**
 * This is the model base class for the table "{{country_payment}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CountryPayment".
 *
 * Columns in table "{{country_payment}}" available as properties of the model,
 * followed by relations of table "{{country_payment}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $country_code
 * @property integer $payment_id
 * @property string $description
 * @property string $name
 * @property string $logo
 * @property string $extra_variables
 * @property string $date_created
 * @property string $date_modified
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $status_id
 * @property double $sending_limit
 *
 * @property Lookup $status
 * @property CountryCurrency $countryCode
 * @property Lookup $payment
 */
abstract class BaseCountryPayment extends GxActiveRecord {

	
	public static function getStatusOptions($id = null)
	{
		$list = array("Draft","Published","Archive");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}	

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{country_payment}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'CountryPayment|CountryPayments', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('country_code, payment_id, name, status_id', 'required'),
			array('payment_id, created_by, updated_by, status_id', 'numerical', 'integerOnly'=>true),
			array('sending_limit', 'numerical'),
			array('country_code, name', 'length', 'max'=>45),
			array('description', 'length', 'max'=>100),
			array('logo, extra_variables, date_created, date_modified', 'safe'),
			array('description, logo, extra_variables, date_created, date_modified, created_by, updated_by, sending_limit', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, country_code, payment_id, description, name, logo, extra_variables, date_created, date_modified, created_by, updated_by, status_id, sending_limit', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'status' => array(self::BELONGS_TO, 'Lookup', 'status_id'),
			'countryCode' => array(self::BELONGS_TO, 'CountryCurrency', 'country_code'),
			'payment' => array(self::BELONGS_TO, 'Lookup', 'payment_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'country_code' => null,
			'payment_id' => null,
			'description' => Yii::t('app', 'Description'),
			'name' => Yii::t('app', 'Name'),
			'logo' => Yii::t('app', 'Logo'),
			'extra_variables' => Yii::t('app', 'Extra Variables'),
			'date_created' => Yii::t('app', 'Date Created'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'created_by' => Yii::t('app', 'Created By'),
			'updated_by' => Yii::t('app', 'Updated By'),
			'status_id' => null,
			'sending_limit' => Yii::t('app', 'Sending Limit'),
			'status' => null,
			'countryCode' => null,
			'payment' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('country_code', $this->country_code);
		$criteria->compare('payment_id', $this->payment_id);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('logo', $this->logo, true);
		$criteria->compare('extra_variables', $this->extra_variables, true);
		$criteria->compare('date_created', $this->date_created, true);
		$criteria->compare('date_modified', $this->date_modified, true);
		$criteria->compare('created_by', $this->created_by);
		$criteria->compare('updated_by', $this->updated_by);
		$criteria->compare('status_id', $this->status_id);
		$criteria->compare('sending_limit', $this->sending_limit);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}