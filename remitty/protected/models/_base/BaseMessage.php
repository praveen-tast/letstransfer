<?php

/**
 * Company: Yee Technologies Pvt. Ltd. < www.yeetechnologies.com >
 * Author : Praveen Shivhare < praveen.tuffgeekers@gmail.com >
 */
 
/**
 * This is the model base class for the table "{{message}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Message".
 *
 * Columns in table "{{message}}" available as properties of the model,
 * followed by relations of table "{{message}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $content
 * @property integer $to_id
 * @property integer $from_id
 * @property string $file_path
 * @property string $file_type
 * @property integer $group_id
 * @property string $session_id
 * @property string $latitude
 * @property string $longitude
 * @property integer $type_id
 * @property integer $state_id
 * @property string $received_time
 * @property string $create_time
 *
 * @property User $from
 * @property User $to
  * @property Group $group
 */
abstract class BaseMessage extends GxActiveRecord {

	public static function getTypeOptions($id = null)
	{
		$list = array("TYPE1","TYPE2","TYPE3");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}
 	
	public static function getStatusOptions($id = null)
	{
		$list = array("Draft","Published","Archive");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}	
	public function beforeValidate()
	{
		if($this->isNewRecord)
		{
				if ( !isset( $this->create_time )) $this->create_time = new CDbExpression('NOW()');
		}else{
				}
		return parent::beforeValidate();
	}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{message}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Message|Messages', $n);
	}

	public static function representingColumn() {
		return 'content';
	}

	public function rules() {
		return array(
			array('content, to_id, from_id, type_id, state_id', 'required'),
			array('to_id, from_id, group_id, type_id, state_id', 'numerical', 'integerOnly'=>true),
			array('file_path, file_type', 'length', 'max'=>255),
			array('session_id, latitude, longitude', 'length', 'max'=>32),
			array('received_time, create_time', 'safe'),
			array('file_path, file_type, group_id, session_id, latitude, longitude, received_time, create_time', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, content, to_id, from_id, file_path, file_type, group_id, session_id, latitude, longitude, type_id, state_id, received_time, create_time', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'from' => array(self::BELONGS_TO, 'User', 'from_id'),
			'to' => array(self::BELONGS_TO, 'User', 'to_id'),
				'group' => array(self::BELONGS_TO, 'Group', 'group_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'content' => Yii::t('app', 'Content'),
			'to_id' => null,
			'from_id' => null,
			'file_path' => Yii::t('app', 'File Path'),
			'file_type' => Yii::t('app', 'File Type'),
			'group_id' => Yii::t('app', 'Group'),
			'session_id' => Yii::t('app', 'Session'),
			'latitude' => Yii::t('app', 'Latitude'),
			'longitude' => Yii::t('app', 'Longitude'),
			'type_id' => Yii::t('app', 'Type'),
			'state_id' => Yii::t('app', 'State'),
			'received_time' => Yii::t('app', 'Received Time'),
			'create_time' => Yii::t('app', 'Create Time'),
			'from' => null,
			'to' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('to_id', $this->to_id);
		$criteria->compare('from_id', $this->from_id);
		$criteria->compare('file_path', $this->file_path, true);
		$criteria->compare('file_type', $this->file_type, true);
		$criteria->compare('group_id', $this->group_id);
		$criteria->compare('session_id', $this->session_id, true);
		$criteria->compare('latitude', $this->latitude, true);
		$criteria->compare('longitude', $this->longitude, true);
		$criteria->compare('type_id', $this->type_id);
		$criteria->compare('state_id', $this->state_id);
		$criteria->compare('received_time', $this->received_time, true);
		$criteria->compare('create_time', $this->create_time, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}