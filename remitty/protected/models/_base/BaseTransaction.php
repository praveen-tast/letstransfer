<?php

/**
 * Company: Yee Technologies Pvt. Ltd. < www.yeetechnologies.com >
 * Author : Praveen Shivhare < praveen.tuffgeekers@gmail.com >
 */
 
/**
 * This is the model base class for the table "{{transaction}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Transaction".
 *
 * Columns in table "{{transaction}}" available as properties of the model,
 * followed by relations of table "{{transaction}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $transaction_id
 * @property string $reference_id
 * @property string $from_country
 * @property string $to_country
 * @property integer $sender_id
 * @property integer $recipient_id
 * @property integer $status_id
 * @property integer $payment_from_id
 * @property integer $payment_to_id
 * @property double $send_amount
 * @property double $receive_amount
 * @property double $total_to_pay
 * @property double $fees_applied
 * @property double $conversion_rate_applied
 * @property string $conversion_rate_on
 * @property string $payment_to_information
 * @property string $payment_from_information
 * @property string $sending_reason
 * @property string $date_created
 * @property string $date_modified
 * @property integer $created_by
 * @property integer $updated_by
 *
 * @property CountryCurrency $fromCountry
 * @property CountryCurrency $toCountry
 * @property Lookup $status
 * @property User $sender
 * @property TransactionLog[] $transactionLogs
 */
abstract class BaseTransaction extends GxActiveRecord {

	
	public static function getStatusOptions($id = null)
	{
		$list = array("Draft","Published","Archive");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}	

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{transaction}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Transaction|Transactions', $n);
	}

	public static function representingColumn() {
		return 'transaction_id';
	}

	public function rules() {
		return array(
			array('transaction_id, from_country, to_country, sender_id, status_id', 'required'),
			array('sender_id, recipient_id, status_id, payment_from_id, payment_to_id, created_by, updated_by', 'numerical', 'integerOnly'=>true),
			array('send_amount, receive_amount, total_to_pay, fees_applied, conversion_rate_applied', 'numerical'),
			array('transaction_id', 'length', 'max'=>45),
			array('reference_id', 'length', 'max'=>100),
			array('from_country, to_country', 'length', 'max'=>24),
			array('conversion_rate_on, payment_to_information, payment_from_information, sending_reason, date_created, date_modified', 'safe'),
			array('reference_id, recipient_id, payment_from_id, payment_to_id, send_amount, receive_amount, total_to_pay, fees_applied, conversion_rate_applied, conversion_rate_on, payment_to_information, payment_from_information, sending_reason, date_created, date_modified, created_by, updated_by', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, transaction_id, reference_id, from_country, to_country, sender_id, recipient_id, status_id, payment_from_id, payment_to_id, send_amount, receive_amount, total_to_pay, fees_applied, conversion_rate_applied, conversion_rate_on, payment_to_information, payment_from_information, sending_reason, date_created, date_modified, created_by, updated_by', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'fromCountry' => array(self::BELONGS_TO, 'CountryCurrency', 'from_country'),
			'toCountry' => array(self::BELONGS_TO, 'CountryCurrency', 'to_country'),
			'status' => array(self::BELONGS_TO, 'Lookup', 'status_id'),
			'sender' => array(self::BELONGS_TO, 'User', 'sender_id'),
			'transactionLogs' => array(self::HAS_MANY, 'TransactionLog', 'transaction_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'transaction_id' => Yii::t('app', 'Transaction'),
			'reference_id' => Yii::t('app', 'Reference'),
			'from_country' => null,
			'to_country' => null,
			'sender_id' => null,
			'recipient_id' => Yii::t('app', 'Recipient'),
			'status_id' => null,
			'payment_from_id' => Yii::t('app', 'Payment From'),
			'payment_to_id' => Yii::t('app', 'Payment To'),
			'send_amount' => Yii::t('app', 'Send Amount'),
			'receive_amount' => Yii::t('app', 'Receive Amount'),
			'total_to_pay' => Yii::t('app', 'Total To Pay'),
			'fees_applied' => Yii::t('app', 'Fees Applied'),
			'conversion_rate_applied' => Yii::t('app', 'Conversion Rate Applied'),
			'conversion_rate_on' => Yii::t('app', 'Conversion Rate On'),
			'payment_to_information' => Yii::t('app', 'Payment To Information'),
			'payment_from_information' => Yii::t('app', 'Payment From Information'),
			'sending_reason' => Yii::t('app', 'Sending Reason'),
			'date_created' => Yii::t('app', 'Date Created'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'created_by' => Yii::t('app', 'Created By'),
			'updated_by' => Yii::t('app', 'Updated By'),
			'fromCountry' => null,
			'toCountry' => null,
			'status' => null,
			'sender' => null,
			'transactionLogs' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('transaction_id', $this->transaction_id, true);
		$criteria->compare('reference_id', $this->reference_id, true);
		$criteria->compare('from_country', $this->from_country);
		$criteria->compare('to_country', $this->to_country);
		$criteria->compare('sender_id', $this->sender_id);
		$criteria->compare('recipient_id', $this->recipient_id);
		$criteria->compare('status_id', $this->status_id);
		$criteria->compare('payment_from_id', $this->payment_from_id);
		$criteria->compare('payment_to_id', $this->payment_to_id);
		$criteria->compare('send_amount', $this->send_amount);
		$criteria->compare('receive_amount', $this->receive_amount);
		$criteria->compare('total_to_pay', $this->total_to_pay);
		$criteria->compare('fees_applied', $this->fees_applied);
		$criteria->compare('conversion_rate_applied', $this->conversion_rate_applied);
		$criteria->compare('conversion_rate_on', $this->conversion_rate_on, true);
		$criteria->compare('payment_to_information', $this->payment_to_information, true);
		$criteria->compare('payment_from_information', $this->payment_from_information, true);
		$criteria->compare('sending_reason', $this->sending_reason, true);
		$criteria->compare('date_created', $this->date_created, true);
		$criteria->compare('date_modified', $this->date_modified, true);
		$criteria->compare('created_by', $this->created_by);
		$criteria->compare('updated_by', $this->updated_by);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}